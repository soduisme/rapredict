import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import mean_squared_error, r2_score
from scipy.interpolate import griddata
import io

st.set_page_config(page_title="–ü—Ä–æ–≥–Ω–æ–∑ —à–µ—Ä–æ—Ö–æ–≤–∞—Ç–æ—Å—Ç–∏ Ra", layout="wide")
st.title("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: –ü—Ä–æ–≥–Ω–æ–∑ –∏ –∞–Ω–∞–ª–∏–∑ —à–µ—Ä–æ—Ö–æ–≤–∞—Ç–æ—Å—Ç–∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ Ra –ø—Ä–∏ —Ç–æ—Ä—Ü–µ–≤–æ–º —Ñ—Ä–µ–∑–µ—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–≥–æ—Ç–æ–≤–æ–∫ –∏–∑ —Å—Ç–∞–ª–∏ 20")
st.markdown("""
**–°–æ–∑–¥–∞—Ç–µ–ª—å**: –ù–≥—É–µ–Ω –ù–≥–æ–∫ –®–æ–Ω - –ú–¢3/–ú–ì–¢–£ –∏–º. –ë–∞—É–º–∞–Ω–∞  
**–¶–µ–ª—å**: –ü—Ä–æ–≥–Ω–æ–∑ –∑–Ω–∞—á–µ–Ω–∏—è Ra –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∏ –æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ –∂–µ–ª–∞–µ–º–æ–º—É Ra –ø—Ä–∏ —Ç–æ—Ä—Ü–µ–≤–æ–º —Ñ—Ä–µ–∑–µ—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–≥–æ—Ç–æ–≤–æ–∫ –∏–∑ —Å—Ç–∞–ª–∏ 20.  
**–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç**: –¢–æ—Ä—Ü–µ–≤–∞—è —Ñ—Ä–µ–∑–∞ BAP300R-40-22 (D=40 –º–º, –∑—É–±—å–µ–≤), –ø–ª–∞—Å—Ç–∏–Ω—ã APMT1135PDER-M2 OP1215.
""")

@st.cache_data
def load_and_train_model():
    df = pd.read_excel("du_lieu_frezing.xlsx")
    X = df[['V', 'S', 't']]
    y = df['Ra']
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

    param_grid = {
        'hidden_layer_sizes': [(10,), (30,), (50,), (20, 10)],
        'learning_rate_init': [0.001, 0.005],
        'activation': ['relu']
    }
    grid = GridSearchCV(MLPRegressor(max_iter=5000, early_stopping=True, random_state=42),
                        param_grid, cv=3, scoring='r2', n_jobs=-1)
    grid.fit(X_train, y_train)
    model = grid.best_estimator_
    return df, scaler, model

df, scaler, model = load_and_train_model()

# Tabs
tab1, tab2, tab3 = st.tabs(["üìä –î–∞–Ω–Ω—ã–µ –∏ –≥—Ä–∞—Ñ–∏–∫–∏", "üîç –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ Ra", "üìà –ü—Ä–æ–≥–Ω–æ–∑ Ra"])

with tab1:
    st.subheader("üìä –¢–∞–±–ª–∏—Ü—ã –∏ –≥—Ä–∞—Ñ–∏–∫–∏")
    st.dataframe(df)

    st.markdown("### –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Ra –æ—Ç (S, V)")
    x, yv, z = df['S'], df['V'], df['Ra']
    xi = np.linspace(x.min(), x.max(), 100)
    yi = np.linspace(yv.min(), yv.max(), 100)
    xi, yi = np.meshgrid(xi, yi)
    zi = griddata((x, yv), z, (xi, yi), method='cubic')
    fig1, ax1 = plt.subplots()
    cp = ax1.contourf(xi, yi, zi, cmap='viridis')
    fig1.colorbar(cp)
    ax1.set_xlabel('S (–º–º/–∑—É–±)')
    ax1.set_ylabel('V (–º/–º–∏–Ω)')
    ax1.set_title('Ra –ø–æ (S, V)')
    st.pyplot(fig1)

    st.markdown("### –û–±—É—á–∞—é—â–∞—è –∫—Ä–∏–≤–∞—è (–ø—Ä–∏–º–µ—Ä)")
    if hasattr(model, 'loss_curve_'):
        fig2, ax2 = plt.subplots()
        ax2.plot(model.loss_curve_)
        ax2.set_title("–ö—Ä–∏–≤–∞—è –æ–±—É—á–µ–Ω–∏—è")
        ax2.set_xlabel("–≠–ø–æ—Ö–∏")
        ax2.set_ylabel("–û—à–∏–±–∫–∞")
        st.pyplot(fig2)

with tab2:
    st.subheader("üîç –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ Ra")
    target_ra = st.number_input("–ñ–µ–ª–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Ra (Œºm):", 0.1, 10.0, 1.2, 0.1)
    num_results = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞:", 1, 10, 4)

    if st.button("üîé –ù–∞–π—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"):
        V_range = np.linspace(df['V'].min(), df['V'].max(), 30)
        S_range = np.linspace(df['S'].min(), df['S'].max(), 30)
        t_range = np.linspace(df['t'].min(), df['t'].max(), 30)
        results = []
        for v in V_range:
            for s in S_range:
                for t in t_range:
                    input_df = pd.DataFrame([[v, s, t]], columns=['V', 'S', 't'])
                    input_scaled = scaler.transform(input_df)
                    ra = model.predict(input_scaled)[0]
                    err = abs(ra - target_ra)
                    results.append((err, v, s, t, ra))
        results.sort()
        out_df = pd.DataFrame(results[:num_results], columns=['–û—à–∏–±–∫–∞', 'V (–º/–º–∏–Ω)', 'S (–º–º/–∑—É–±)', 't (–º–º)', 'Ra –ø—Ä–æ–≥–Ω–æ–∑'])
        st.dataframe(out_df)

with tab3:
    st.subheader("üìà –ü—Ä–æ–≥–Ω–æ–∑ Ra")
    v = st.number_input("–°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ–∑–∞–Ω–∏—è V (–º/–º–∏–Ω):", 10.0, 300.0, 120.0, 5.0)
    s = st.number_input("–ü–æ–¥–∞—á–∞ –Ω–∞ –∑—É–± S (–º–º/–∑—É–±):", 0.01, 1.0, 0.15, 0.01)
    t = st.number_input("–ì–ª—É–±–∏–Ω–∞ —Ä–µ–∑–∞–Ω–∏—è t (–º–º):", 0.1, 5.0, 0.5, 0.1)

    if st.button("üìâ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å Ra"):
        input_df = pd.DataFrame([[v, s, t]], columns=['V', 'S', 't'])
        input_scaled = scaler.transform(input_df)
        ra_pred = model.predict(input_scaled)[0]
        st.success(f"–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ–µ Ra: {ra_pred:.4f} Œºm –ø—Ä–∏ V={v} –º/–º–∏–Ω, S={s} –º–º/–∑—É–±, t={t} –º–º")

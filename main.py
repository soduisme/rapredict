# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ANB94VH29A9T5tGoByL3UIM7pZ55kAg7
"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import MinMaxScaler
from sklearn.neural_network import MLPRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Load d·ªØ li·ªáu
@st.cache_data
def load_data():
    df = pd.read_excel('du_lieu_frezing.xlsx')
    return df

df = load_data()

st.title("üîß D·ª± ƒëo√°n ƒë·ªô nh√°m b·ªÅ m·∫∑t Ra khi phay b·∫±ng MLP")

# Ti·ªÅn x·ª≠ l√Ω
X = df[['V', 'S', 't']]
y = df['Ra']
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Hu·∫•n luy·ªán m√¥ h√¨nh
@st.cache_resource
def train_model():
    param_grid = {
        'hidden_layer_sizes': [(13,)],
        'learning_rate_init': [0.001],
        'activation': ['relu']
    }
    grid = GridSearchCV(
        estimator=MLPRegressor(max_iter=1000, early_stopping=True, random_state=42),
        param_grid=param_grid,
        cv=3,
        scoring='r2'
    )
    grid.fit(X_train, y_train)
    return grid.best_estimator_

model = train_model()

# Tab giao di·ªán
tab1, tab2 = st.tabs(["üîÆ D·ª± ƒëo√°n Ra", "üéØ T√¨m th√¥ng s·ªë ph√π h·ª£p"])

with tab1:
    st.header("D·ª± ƒëo√°n Ra t·ª´ th√¥ng s·ªë c·∫Øt")
    s = st.number_input("S - L∆∞·ª£ng ch·∫°y dao (mm/tooth)", value=0.15, format="%.3f")
    v = st.number_input("V - T·ªëc ƒë·ªô c·∫Øt (m/min)", value=120.0, format="%.1f")
    t = st.number_input("t - Chi·ªÅu s√¢u c·∫Øt (mm)", value=0.5, format="%.3f")

    if st.button("D·ª± ƒëo√°n"):
        input_df = pd.DataFrame([[v, s, t]], columns=['V', 'S', 't'])
        input_scaled = scaler.transform(input_df)
        ra_pred = model.predict(input_scaled)[0]
        st.success(f"‚úÖ D·ª± ƒëo√°n Ra: {ra_pred:.4f} Œºm")

with tab2:
    st.header("T√¨m S, V, t cho Ra mong mu·ªën")
    target_ra = st.number_input("Nh·∫≠p gi√° tr·ªã Ra mong mu·ªën (Œºm)", value=1.2, format="%.2f")
    n = st.slider("S·ªë k·∫øt qu·∫£ g·ª£i √Ω", 1, 10, 4)

    if st.button("T√¨m th√¥ng s·ªë"):
        V_range = np.linspace(df['V'].min(), df['V'].max(), 30)
        S_range = np.linspace(df['S'].min(), df['S'].max(), 30)
        t_range = np.linspace(df['t'].min(), df['t'].max(), 30)

        results = []
        for v in V_range:
            for s in S_range:
                for t in t_range:
                    row = pd.DataFrame([[v, s, t]], columns=['V', 'S', 't'])
                    row_scaled = scaler.transform(row)
                    ra = model.predict(row_scaled)[0]
                    sai_so = abs(ra - target_ra)
                    results.append((sai_so, v, s, t, ra))

        results.sort()
        top_k = results[:n]
        df_result = pd.DataFrame(top_k, columns=['Sai s·ªë', 'V', 'S', 't', 'Ra d·ª± ƒëo√°n'])
        st.dataframe(df_result.drop(columns='Sai s·ªë').reset_index(drop=True))